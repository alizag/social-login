<?phpnamespace Gaoming13\SocialLogin;use Gaoming13\HttpCurl\HttpCurl;/** * QQ第三方登录 * * 官方手册：http://wiki.connect.qq.com/ * * Class Qq * @package Gaoming13\SocialLogin */class Qq implements BaseInterface{    /**     * 应用的唯一标识     * @var string     */    public $appId;    /**     * appid对应的密钥     * @var string     */    public $appKey;    /**     * 回调地址     * @var string     */    public $redirectUri;    /**     * @var string     */    protected $code;    /**     * 用于第三方应用防止CSRF攻击     * @var string     */    protected $state;    /**     * @var string     */    protected $accessToken;    /**     * @var string     */    protected $openId;    /**     * 获取跳转到第三方登录页的url     * @return string     */    public function getLoginUrl()    {        return Helper::combineURL('https://graph.qq.com/oauth2.0/authorize', array(            'response_type' => 'code',            'client_id' => $this->appId,            'redirect_uri' => urlencode($this->redirectUri),            'state' => $this->getState()        ));    }    /**     * 获取授权后获取的用户唯一标识     * @return array     */    public function getUid()    {        // 获取code        $this->code = $this->getCode();        // 获取state        $this->state = $this->getCallBackState();        // 获取access_token        $this->accessToken = $this->getAccessToken($this->code);        // 获取openid        $this->openId = $this->getOpenId($this->accessToken);        return $this->openId;    }    /**     * 获取授权后获取的用户信息     * @return array     */    public function getUserInfo()    {        return $this->getUser($this->accessToken, $this->openId);    }    /**     * 获取code     * @return string     * @throws \Exception     */    private function getCode()    {        $code = Helper::getParam('code');        if ($code == '') {            throw new \Exception('获取code失败');        }        return $code;    }    /**     * 获取回调传来的的state     * @return string     * @throws \Exception     */    private function getCallBackState()    {        $state = Helper::getParam('state');        if ($state == '') {            throw new \Exception('获取state失败');        }        return $state;    }    /**     * 获取AccessToken     * @param string $code     * @return mixed     * @throws \Exception     */    private function getAccessToken($code) {        // 获取access_token        $url = Helper::combineURL('https://graph.qq.com/oauth2.0/token', array(            'grant_type' => 'authorization_code',            'client_id' => $this->appId,            'client_secret' => $this->appKey,            'code' => $code,            'redirect_uri' => urlencode($this->redirectUri)        ));        list($body, $header, $status, $errno, $error) = HttpCurl::request($url, 'get');        if ($errno != 0) {            throw new \Exception(json_encode(['网络错误, 获取access_token失败', $body, $header, $status, $errno, $error]));        }        if (!preg_match_all('/access_token=(.*?)&/s', $body, $accessToken)) {            throw new \Exception(json_encode(['获取access_token失败', $body]));        }        return $accessToken[1][0];    }    /**     * 获取openid     * @param string $accessToken     * @return mixed     * @throws \Exception     */    private function getOpenId($accessToken)    {        $url = Helper::combineURL('https://graph.qq.com/oauth2.0/me', array(            'access_token' => $accessToken        ));        list($body, $header, $status, $errno, $error) = HttpCurl::request($url, 'get');        if ($errno != 0) {            throw new \Exception(json_encode(['网络错误, 获取openid失败', $body, $header, $status, $errno, $error]));        }        if (!preg_match_all('/(?:.*?)openid":"(.*?)"}/s', $body, $openId)) {            throw new \Exception(json_encode(['获取openid失败', $body]));        }        return $openId[1][0];    }    /**     * 获取用户信息     * @param string $accessToken     * @param string $openId     * @return mixed     * @throws \Exception     */    private function getUser($accessToken, $openId)    {        $url = Helper::combineURL('https://graph.qq.com/user/get_user_info', array(            'access_token' => $accessToken,            'oauth_consumer_key' => $this->appId,            'openid' => $openId        ));        list($body, $header, $status, $errno, $error) = HttpCurl::request($url, 'get');        if ($errno != 0) {            throw new \Exception(json_encode(['网络错误, 获取用户信息失败', $body, $header, $status, $errno, $error]));        }        $body = (array)json_decode($body);        if (isset($body['ret']) && $body['ret'] == 0) {            return $body;        } else {            throw new \Exception(json_encode(['获取用户信息失败', $body]));        }    }    /**     * 获取state 用于第三方应用防止CSRF攻击     * @return string     */    private function getState()    {        if (is_null($this->state)) {            $this->state = md5(uniqid(rand(), TRUE));        }        return $this->state;    }}